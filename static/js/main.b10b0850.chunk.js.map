{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","PathfindingVisualizer/Buttons/DropdownMenu/DropdownMenu.jsx","PathfindingVisualizer/NavigationBar/NavigationBar.jsx","PathfindingVisualizer/Images/paintbrushes.svg","PathfindingVisualizer/Buttons/DrawToggle/DrawToggle.jsx","PathfindingVisualizer/Images/weight-plates.svg","PathfindingVisualizer/Buttons/Slider/Slider.js","PathfindingVisualizer/AlgorithmTitle/AlgorithmTitle.jsx","PathfindingVisualizer/Data Structures/MinHeap.js","PathfindingVisualizer/Search Algorithms/SearchHelperFunctions.js","PathfindingVisualizer/Search Algorithms/Dijkstra.js","PathfindingVisualizer/Data Structures/Queue.js","PathfindingVisualizer/Search Algorithms/BreadthFirstSearch.js","PathfindingVisualizer/Search Algorithms/DepthFirstSearch.js","PathfindingVisualizer/Search Algorithms/AStar.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","props","state","this","setState","isWall","handleOnMouseDown","row","col","handleOnMouseUp","handleOnMouseEnter","nextProps","nextState","isVisited","isPath","isStart","isTargetReached","isWeight","isTarget","direction","nodeType","onDragStart","e","preventDefault","className","onMouseDown","bind","onMouseUp","onMouseEnter","id","Component","DropdownMenu","useState","dropdownIsVisible","setDropdownIsVisible","title","onClick","children","map","child","index","NavigationBar","WALLS","WEIGHTS","Toggle","selected","setSelected","setDrawMode","src","brushesImg","width","height","Slider","value","setValue","weightImg","type","min","max","onChange","target","valueAsNumber","AlgorithmTitle","algorithm","infoIsDisplayed","setInfoIsDisplayed","dijkstraInfo","concat","bfsInfo","dfsInfo","aStarInfo","onMouseLeave","getInfo","MinHeap","heap","node","push","currIndex","length","parentIndex","Math","floor","distance","head","tail","splice","leftChildIndex","rightChildIndex","minChild","minIndex","getNeighbors","numRows","numCols","grid","neighbors","isSafe","dijkstra","startNode","targetNode","weightValue","priorityQueue","visitedNodesInOrder","shortestPathReversed","insert","isEmpty","pop","pathNode","previousNode","neighbor","weight","Queue","queue","DoublyLinkedList","ListNode","popHead","getData","listNode","setNext","getNext","data","next","breadthFirstSearch","q","enqueue","dequeue","depthFirstSearch","pathReversed","dfs","aStar","f","abs","h","g","NUM_ROWS","window","innerHeight","NUM_COLS","document","body","scrollWidth","documentElement","offsetWidth","clientWidth","TARGET_NODE_ROW","TARGET_NODE_COL","DIJKSTRA","BFS","DFS","ASTAR","PathfindingVisualizer","startNodeRow","startNodeCol","targetNodeRow","targetNodeCol","mouseDown","drawMode","movingStart","movingTarget","movingLaunchPad","launchPadRow","launchPadCol","createInitialGrid","onmouseup","onmouseleave","visualize","clearPath","clearWalls","clearWeights","style","marginRight","mode","setWeightValue","displayGrid","visualizeDijkstra","visualizeBreadthFirstSearch","visualizeDepthFirstSearch","visualizeAStar","copyGrid","lines","pathToLines","i","resetNodes","animateSearch","setTimeout","animatePath","element","getElementById","classList","remove","add","moveRocketShip","prevNode","directions","currNode","dRow","dCol","line","node_","prevTarget","redrawPath","prevLaunchPad","currentRow","NodeObj","nodes","rowIndex","nodeIndex","draggable","Infinity","copiedGrid","copiedRow","Object","assign","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b10b0850.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./Node.css\";\n\nexport default class Node extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  toggleWall() {\n    this.setState({ isWall: !this.props.isWall });\n  }\n\n  handleOnMouseDown() {\n    this.props.handleOnMouseDown(this.props.row, this.props.col);\n  }\n\n  handleOnMouseUp() {\n    this.props.handleOnMouseUp();\n  }\n\n  handleOnMouseEnter() {\n    this.props.handleOnMouseEnter(this.props.row, this.props.col);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      nextProps.isWall !== this.props.isWall ||\n      nextProps.isVisited !== this.props.isVisited ||\n      nextProps.isPath !== this.props.isPath ||\n      nextProps.isStart !== this.props.isStart ||\n      nextProps.isTargetReached !== this.props.isTargetReached ||\n      nextProps.isWeight !== this.props.isWeight ||\n      nextProps.isTarget !== this.props.isTarget ||\n      nextProps.direction !== this.props.direction\n    ) {\n      return true;\n    }\n    return true;\n  }\n\n  render() {\n    const {\n      isTarget,\n      isStart,\n      isWall,\n      isWeight,\n      isVisited,\n      isPath,\n      row,\n      col,\n      direction,\n      isTargetReached,\n    } = this.props;\n    const nodeType = isTargetReached\n      ? \"node-target-reached\"\n      : isPath && direction == \"landing-pad\"\n      ? \"node-path-landing-pad\"\n      : isTarget\n      ? \"node-target\"\n      : isStart\n      ? \"node-start\"\n      : isWall\n      ? \"node-wall\"\n      : isWeight\n      ? \"node-weight\"\n      : isPath && direction == \"horizontal\"\n      ? \"node-path-horizontal\"\n      : isPath && direction == \"vertical\"\n      ? \"node-path-vertical\"\n      : isPath && direction == \"ul\"\n      ? \"node-path-ul\"\n      : isPath && direction == \"ur\"\n      ? \"node-path-ur\"\n      : isPath && direction == \"bl\"\n      ? \"node-path-bl\"\n      : isPath && direction == \"br\"\n      ? \"node-path-br\"\n      : \"\";\n    return (\n      <div\n        onDragStart={(e) => {\n          e.preventDefault();\n        }}\n        className=\"node-bounds\"\n        onMouseDown={this.handleOnMouseDown.bind(this)}\n        onMouseUp={this.handleOnMouseUp.bind(this)}\n        onMouseEnter={this.handleOnMouseEnter.bind(this)}\n      >\n        <div\n          className={`node ${nodeType} ${isVisited ? \"visited\" : \"unvisited\"}`}\n          id={`node-${row}-${col}`}\n        ></div>\n      </div>\n    );\n  }\n}\n","import React, { useState } from \"react\";\nimport \"./DropdownMenu.css\";\n\nexport default function DropdownMenu(props) {\n  const [dropdownIsVisible, setDropdownIsVisible] = useState(false);\n  const { title } = props;\n\n  const onClick = () => {\n    setDropdownIsVisible(!dropdownIsVisible);\n  };\n\n  return (\n    <div className=\"dropdown-menu\">\n      <button id=\"button\" onClick={onClick}>\n        {title}\n      </button>\n      {dropdownIsVisible ? (\n        <ul onClick={() => setDropdownIsVisible(false)}>\n          {props.children.map((child, index) => {\n            return <li key={index}>{child}</li>;\n          })}\n        </ul>\n      ) : null}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./NavigationBar.css\";\n\nexport default function NavigationBar(props) {\n  return <div className=\"navigation-bar\">{props.children}</div>;\n}\n","export default __webpack_public_path__ + \"static/media/paintbrushes.8ab87ecc.svg\";","import React, { useState } from \"react\";\nimport \"./DrawToggle.css\";\nimport brushesImg from \"../../Images/paintbrushes.svg\";\n\nconst WALLS = \"Walls\";\nconst WEIGHTS = \"Weights\";\n\nexport default function Toggle(props) {\n  const [selected, setSelected] = useState(WALLS);\n  const { setDrawMode } = props;\n\n  return (\n    <div id=\"container\">\n      <img id=\"brushes-img\" src={brushesImg} width=\"14\" height=\"14\" />\n      <div className=\"toggle\">\n        <button\n          onClick={() => {\n            setSelected(WALLS);\n            setDrawMode(WALLS);\n          }}\n          className={selected === WALLS ? \"selected\" : \"unselected\"}\n        >\n          Walls\n        </button>\n        <button\n          onClick={() => {\n            setSelected(WEIGHTS);\n            setDrawMode(WEIGHTS);\n          }}\n          className={selected === WEIGHTS ? \"selected\" : \"unselected\"}\n        >\n          Weights\n        </button>\n      </div>\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/weight-plates.4761408d.svg\";","import React, { useState } from \"react\";\nimport \"./Slider.css\";\nimport weightImg from \"../../Images/weight-plates.svg\";\n\nexport default function Slider(props) {\n  const { value, setValue } = props;\n\n  return (\n    <div>\n      <img id=\"weightImg\" src={weightImg} width=\"14\" height=\"14\" />\n      <div className=\"slider-container\">\n        <input\n          className=\"slider\"\n          type=\"range\"\n          min={1}\n          max={20}\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.valueAsNumber);\n          }}\n        />\n        <p id=\"value\">{value}</p>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./AlgorithmTitle.css\";\n\nconst DIJKSTRA = \"Dijkstra\";\nconst BFS = \"BFS\";\nconst DFS = \"DFS\";\nconst ASTAR = \"A*\";\n\nexport function AlgorithmTitle(props) {\n  const { algorithm } = props;\n  const [infoIsDisplayed, setInfoIsDisplayed] = useState(false);\n\n  const dijkstraInfo =\n    \"Dijkstra's Algorithm finds the shortest path between between two given nodes.\".concat(\n      \" It does this by taking into account the weights of edges and using a priority queue that sorts neighboring nodes by distance.\".concat(\n        \" It then visits those nodes in ascending order of distance.\".concat(\n          \" In this visualization, nodes have a distance of 1 and weights have a distance of 5.\"\n        )\n      )\n    );\n  const bfsInfo =\n    \"Breadth First Search finds the shortest path between between two given nodes.\".concat(\n      \" It starts by adding neighboring nodes to a queue.\".concat(\n        \" It then pops the first node from the queue, visits it, and adds its neighbors to the queue.\"\n          .concat(\" This process repeats until the target node is reached.\")\n          .concat(\" Breadth First Search does not take weights into account.\")\n      )\n    );\n  const dfsInfo =\n    \"Depth First Search finds a path between between two given nodes, but it does not guarentee the shortest path.\".concat(\n      \" It does this by recursively visiting neighboring nodes instead of using a queue.\".concat(\n        \" This means that deep nodes will be reached before nearby nodes.\".concat(\n          \" Depth First Search does not take weights into account.\"\n        )\n      )\n    );\n  const aStarInfo =\n    \"A* Search Algorithm finds the shortest path between between two given nodes.\".concat(\n      \" It also has knowledge of where the end node is beforehand.\".concat(\n        \" It uses a queue similar to Dijkstra's algorithm, but instead assigns scores to neighboring nodes based on distance to the node along with estimated distance to the target node.\".concat(\n          \" In this visualization, nodes have a distance of 1 and weights have a distance of 5.\"\n        )\n      )\n    );\n\n  const getInfo = (algorithm) => {\n    switch (algorithm) {\n      case DIJKSTRA:\n        return dijkstraInfo;\n      case BFS:\n        return bfsInfo;\n      case DFS:\n        return dfsInfo;\n      case ASTAR:\n        return aStarInfo;\n    }\n  };\n\n  return (\n    <div id=\"bottom-left-fixed\">\n      <h1 id=\"big-algorithm-name\">{algorithm}</h1>\n      <div\n        onMouseEnter={() => setInfoIsDisplayed(true)}\n        onMouseLeave={() => setInfoIsDisplayed(false)}\n        className=\"info-icon\"\n      />\n      {infoIsDisplayed ? (\n        <p className=\"info-popup\">{getInfo(algorithm)}</p>\n      ) : null}\n    </div>\n  );\n}\n","// Used to put nodes in a priority queue based on distance.\nexport default class MinHeap {\n    constructor() {\n        this.heap = [null];\n    }\n\n    // Insert an element into the heap and fix the heap.\n    insert(node) {\n        this.heap.push(node);\n        let currIndex = this.heap.length - 1;\n        let parentIndex = Math.floor(currIndex / 2);\n        while (currIndex > 1 && node.distance < this.heap[parentIndex].distance) {\n            [this.heap[parentIndex], this.heap[currIndex]] = [this.heap[currIndex], this.heap[parentIndex]];\n            currIndex = parentIndex;\n            parentIndex = Math.floor(currIndex / 2);\n        }\n    }\n\n    // Pop minimum element from the front of the heap and fix the heap.\n    pop() {\n        if (this.heap.length > 2) {\n            const head = this.heap[1];\n            const tail = this.heap.splice(this.heap.length - 1)[0];\n            this.heap[1] = tail;\n\n            let currIndex = 1;\n            let leftChildIndex = currIndex * 2;\n            let rightChildIndex = currIndex * 2 + 1;\n            // While there are two child nodes, swap currNode with minChild if minChild is smaller.\n            while (this.heap[leftChildIndex] && this.heap[rightChildIndex]) {\n                let minChild = this.heap[leftChildIndex];\n                let minIndex = leftChildIndex;\n                if (this.heap[rightChildIndex].distance < minChild.distance) {\n                    minChild = this.heap[rightChildIndex];\n                    minIndex = rightChildIndex\n                }\n                if (this.heap[currIndex].distance > minChild.distance) {\n                    [this.heap[currIndex], this.heap[minIndex]] = [this.heap[minIndex], this.heap[currIndex]];\n                    currIndex = minIndex;\n                } else {\n                    break;\n                }\n                leftChildIndex = currIndex * 2;\n                rightChildIndex = currIndex * 2 + 1;\n            }\n            // If there is one child node, swap it with currNode if currNode is smaller.\n            if (this.heap[leftChildIndex] && (this.heap[currIndex].distance > this.heap[leftChildIndex].distance)) {\n                [this.heap[currIndex], this.heap[leftChildIndex]] = [this.heap[leftChildIndex], this.heap[currIndex]];\n            } else if (this.heap[rightChildIndex] && (this.heap[currIndex].distance > this.heap[rightChildIndex].distance)) {\n                [this.heap[currIndex], this.heap[rightChildIndex]] = [this.heap[rightChildIndex], this.heap[currIndex]];\n            }\n            return head;\n        } else if (this.heap.length === 2) {\n            return this.heap.splice(1, 1)[0];\n        } else {\n            return null;\n        }\n    }\n\n    // Returns true if the minheap is empty.\n    isEmpty() {\n        if (this.heap.length < 2) {\n            return true;\n        }\n        return false;\n    }\n}","// Returns ALL neighbors of 'node', visited or not. Neighbors\n// cannot have walls.\nexport function getNeighbors(node, numRows, numCols, grid) {\n    const {row, col} = node;\n    const neighbors = [];\n    // North neighbor.\n    if (isSafe(row + 1, col, numRows, numCols) && !grid[row + 1][col].isWall) {\n        neighbors.push(grid[row + 1][col]);\n    }\n    // South neighbor.\n    if (isSafe(row - 1, col, numRows, numCols) && !grid[row - 1][col].isWall) {\n        neighbors.push(grid[row - 1][col]);\n    }\n    // East neighbor.\n    if (isSafe(row, col + 1, numRows, numCols) && !grid[row][col + 1].isWall) {\n        neighbors.push(grid[row][col + 1]);\n    }\n    // West neighbor.\n    if (isSafe(row, col - 1, numRows, numCols) && !grid[row][col - 1].isWall) {\n        neighbors.push(grid[row][col - 1]);\n    }\n    return neighbors;\n}\n\n// Returns true if row and col are on the board.\nfunction isSafe(row, col, numRows, numCols) {\n    if (row >= 0 && row < numRows &&\n        col >= 0 && col < numCols) {\n        return true;\n    }\n    return false;\n}","import MinHeap from \"../Data Structures/MinHeap\";\nimport { getNeighbors } from \"./SearchHelperFunctions\";\n\n// Use dijkstra's algorithm to find the shortest path from 'startNode' to\n//'targetNode' in 'grid'. Return an array of the visited nodes in order as\n// well as the shortest path in reversed order.\nexport function dijkstra(\n  grid,\n  startNode,\n  targetNode,\n  numRows,\n  numCols,\n  weightValue\n) {\n  startNode.distance = 0;\n  const priorityQueue = new MinHeap();\n  const visitedNodesInOrder = [];\n  const shortestPathReversed = [];\n  priorityQueue.insert(startNode);\n  while (!priorityQueue.isEmpty()) {\n    const node = priorityQueue.pop();\n    visitedNodesInOrder.push(node);\n    if (node === targetNode) {\n      // The target node was discovered.\n      let pathNode = node;\n      while (pathNode !== startNode) {\n        shortestPathReversed.push(pathNode);\n        pathNode = pathNode.previousNode;\n      }\n      shortestPathReversed.push(pathNode);\n      return { visitedNodesInOrder, shortestPathReversed };\n    }\n    const neighbors = getNeighbors(node, numRows, numCols, grid);\n    for (const neighbor of neighbors) {\n      const weight = neighbor.isWeight ? weightValue : 1;\n      // Only update distance of neighbors if path results in lower distance.\n      if (node.distance + weight < neighbor.distance) {\n        neighbor.distance = node.distance + weight;\n        neighbor.previousNode = node;\n      }\n      // Only add unvisited nodes to the priority queue.\n      if (!neighbor.isVisited) {\n        neighbor.isVisited = true;\n        priorityQueue.insert(neighbor);\n      }\n      //priorityQueue.insert(neighbor);\n    }\n  }\n  // The target node could not be reached.\n  return { visitedNodesInOrder, shortestPathReversed };\n}\n","// Used as a first-in, first-out datastructure.\nexport default class Queue {\n    constructor() {\n        this.queue = new DoublyLinkedList();\n    }\n\n    enqueue(node) {\n        this.queue.insert(new ListNode(node));\n    }\n\n    dequeue() {\n        return this.queue.popHead();\n    }\n\n    isEmpty() {\n        return this.queue.isEmpty();\n    }\n}\n\nclass DoublyLinkedList {\n    constructor(head = null) {\n        this.head = head;\n        this.tail = head;\n    }\n\n    getHead() {\n        return this.head.getData();\n    }\n\n    // Inserts an element onto the end of the list.\n    insert(listNode) {\n        if (this.tail !== null) {\n            this.tail.setNext(listNode);\n            this.tail = listNode;\n        } else {\n            this.head = listNode;\n            this.tail = listNode;\n        }\n    }\n\n    // Removes the first element from the list.\n    popHead() {\n        const listNode = this.head;\n        if (listNode !== null) {\n            this.head = this.head.getNext();\n        }\n        if (this.head === null) {\n            this.tail = null;\n        }\n        return listNode.getData();\n    }\n\n    isEmpty() {\n        return this.head === null;\n    }\n}\n\n// The node to be used in the LinkedList.\nclass ListNode {\n    constructor(data) {\n        this.data = data;\n        this.next = null;\n    }\n\n    setNext(next) {\n        this.next = next;\n    }\n\n    getNext() {\n        return this.next;\n    }\n\n    getData() {\n        return this.data;\n    }\n}","import Queue from '../Data Structures/Queue';\nimport { getNeighbors } from './SearchHelperFunctions';\n\n// Use breadth first search to find the shortest path from 'startNode' to 'targetNode'\n// in 'grid'. Return an array of the visited nodes in order as well as an array\n// of the shortest path in reversed order.\nexport function breadthFirstSearch(grid, startNode, targetNode, numRows, numCols) {\n    const visitedNodesInOrder = [];\n    const shortestPathReversed = [];\n    const q = new Queue();\n    q.enqueue(startNode);\n    startNode.isVisited = true;\n    while (!q.isEmpty()) {\n        const node = q.dequeue();\n        visitedNodesInOrder.push(node);\n        if (node === targetNode) {\n            // The target node was discovered.\n            let pathNode = node;\n            while (pathNode !== startNode) {\n                shortestPathReversed.push(pathNode);\n                pathNode = pathNode.previousNode;\n            }\n            shortestPathReversed.push(pathNode);\n            return {visitedNodesInOrder, shortestPathReversed};\n        }\n        const neighbors = getNeighbors(node, numRows, numCols, grid);\n        for (const neighbor of neighbors) {\n            if (!neighbor.isVisited) {\n                q.enqueue(neighbor);\n                neighbor.isVisited = true;\n                neighbor.previousNode = node;\n            }\n        }\n    }\n    // The target node could not be reached.\n    return {visitedNodesInOrder, shortestPathReversed};\n}\n\n// Add walls that can be placed.\n// Add bridges that take you from one node to another in shorter time.\n// Add weights that slow you down.","import {getNeighbors} from './SearchHelperFunctions';\n\n// Use depth first search to find a path from 'startNode' to 'targetNode'\n// in 'grid'. The path is not guaranteed to be the shortest path. Return \n// an array of the visited nodes in order as well as an array of the path \n// discovered in reversed order.\nexport function depthFirstSearch(grid, startNode, targetNode, numRows, numCols) {\n    const visitedNodesInOrder = [];\n    const pathReversed = [];\n    startNode.isVisited = true;\n    dfs(grid, startNode, targetNode, numRows, numCols, visitedNodesInOrder, pathReversed);\n    pathReversed.push(startNode);\n    return {visitedNodesInOrder, pathReversed};\n}\n\n// Recursive function to be used for depth first search.\nfunction dfs(grid, node, targetNode, numRows, numCols, visitedNodesInOrder, pathReversed) {\n    if (node === targetNode) {\n        // Target node was discovered.\n        pathReversed.push(node);\n        return true;\n    }\n    const neighbors = getNeighbors(node, numRows, numCols, grid);\n    for (const neighbor of neighbors) {\n        if (!neighbor.isVisited) {\n            neighbor.isVisited = true;\n            neighbor.previousNode = node;\n            visitedNodesInOrder.push(neighbor);\n            if (dfs(grid, neighbor, targetNode, numRows, numCols, visitedNodesInOrder, pathReversed)) {\n                pathReversed.push(neighbor);\n                return true;\n            }\n        }\n    }\n    // Target node not found.\n    return false;\n}","import { getNeighbors } from \"./SearchHelperFunctions\";\n\nexport function aStar(\n  grid,\n  startNode,\n  targetNode,\n  numRows,\n  numCols,\n  weightValue\n) {\n  const priorityQueue = new MinHeap(targetNode);\n  const visitedNodesInOrder = [];\n  const shortestPathReversed = [];\n  // Start the algorithm at the startNode.\n  startNode.distance = 0;\n  startNode.isVisited = true;\n  priorityQueue.insert(startNode, targetNode);\n  // Traverse nodes until priority queue is empty.\n  while (!priorityQueue.isEmpty()) {\n    const node = priorityQueue.pop();\n    visitedNodesInOrder.push(node);\n    if (node === targetNode) {\n      // The target Node was discovered.\n      let pathNode = node;\n      while (pathNode !== startNode) {\n        shortestPathReversed.push(pathNode);\n        pathNode = pathNode.previousNode;\n      }\n      shortestPathReversed.push(pathNode);\n      return { visitedNodesInOrder, shortestPathReversed };\n    }\n    // Get neighboring nodes and add to priority queue if unvisited.\n    const neighbors = getNeighbors(node, numRows, numCols, grid);\n    for (const neighbor of neighbors) {\n      const weight = neighbor.isWeight ? weightValue : 1;\n      if (!neighbor.isVisited) {\n        // Update the neighbor's distance.\n        neighbor.distance = node.distance + weight;\n        neighbor.previousNode = node;\n        priorityQueue.insert(neighbor, targetNode);\n        neighbor.isVisited = true;\n      } else {\n        // Update neighbor's distance to minimum of possible routes to that neighbor.\n        if (node.distance + weight < neighbor.distance) {\n          neighbor.distance = node.distance + weight;\n          neighbor.previousNode = node;\n          // Insert the neighbor into the queue again.\n          priorityQueue.insert(neighbor, targetNode);\n        }\n      }\n    }\n  }\n  // The target node could not be reached.\n  return { visitedNodesInOrder, shortestPathReversed };\n}\n\n// G function for aStar that returns distance it took to get to specified node.\nfunction g(node) {\n  return node.distance;\n}\n\n// Heuristic function for aStar using Manhattan distance.\nfunction h(node, targetNode) {\n  const dx = Math.abs(targetNode.row - node.row);\n  const dy = Math.abs(targetNode.col - node.col);\n  return dx + dy;\n}\n\nfunction f(node, targetNode) {\n  return h(node, targetNode) + g(node);\n}\n\n// Used to put nodes in a priority queue based on f score (g + h). This priority queue does\n// not support reprioritizing. Instead, nodes in the queue with updated distances are inserted\n// into the queue a second time. This is okay because it won't really affect runtime.\nclass MinHeap {\n  constructor(targetNode) {\n    this.heap = [null];\n    this.targetNode = targetNode;\n  }\n\n  // Insert an element into the heap and fix the heap.\n  insert(node, targetNode) {\n    this.heap.push(node);\n    let currIndex = this.heap.length - 1;\n    let parentIndex = Math.floor(currIndex / 2);\n    while (\n      currIndex > 1 &&\n      f(node, targetNode) <= f(this.heap[parentIndex], targetNode)\n    ) {\n      [this.heap[parentIndex], this.heap[currIndex]] = [\n        this.heap[currIndex],\n        this.heap[parentIndex],\n      ];\n      currIndex = parentIndex;\n      parentIndex = Math.floor(currIndex / 2);\n    }\n  }\n\n  // Pop minimum element from the front of the heap and fix the heap.\n  pop() {\n    if (this.heap.length > 2) {\n      const head = this.heap[1];\n      const tail = this.heap.splice(this.heap.length - 1)[0];\n      this.heap[1] = tail;\n\n      let currIndex = 1;\n      let leftChildIndex = currIndex * 2;\n      let rightChildIndex = currIndex * 2 + 1;\n      // While there are two child nodes, swap currNode with minChild if minChild is smaller.\n      while (this.heap[leftChildIndex] && this.heap[rightChildIndex]) {\n        let minChild = this.heap[leftChildIndex];\n        let minIndex = leftChildIndex;\n        if (\n          f(this.heap[rightChildIndex], this.targetNode) <\n          f(minChild, this.targetNode)\n        ) {\n          minChild = this.heap[rightChildIndex];\n          minIndex = rightChildIndex;\n        }\n        if (\n          f(this.heap[currIndex], this.targetNode) >\n          f(minChild, this.targetNode)\n        ) {\n          [this.heap[currIndex], this.heap[minIndex]] = [\n            this.heap[minIndex],\n            this.heap[currIndex],\n          ];\n          currIndex = minIndex;\n        } else {\n          break;\n        }\n        leftChildIndex = currIndex * 2;\n        rightChildIndex = currIndex * 2 + 1;\n      }\n      // If there is one child node, swap it with currNode if currNode is smaller.\n      if (\n        this.heap[leftChildIndex] &&\n        f(this.heap[currIndex], this.targetNode) >\n          f(this.heap[leftChildIndex], this.targetNode)\n      ) {\n        [this.heap[currIndex], this.heap[leftChildIndex]] = [\n          this.heap[leftChildIndex],\n          this.heap[currIndex],\n        ];\n      } else if (\n        this.heap[rightChildIndex] &&\n        f(this.heap[currIndex], this.targetNode) >\n          f(this.heap[rightChildIndex], this.targetNode)\n      ) {\n        [this.heap[currIndex], this.heap[rightChildIndex]] = [\n          this.heap[rightChildIndex],\n          this.heap[currIndex],\n        ];\n      }\n      return head;\n    } else if (this.heap.length === 2) {\n      return this.heap.splice(1, 1)[0];\n    } else {\n      return null;\n    }\n  }\n\n  // Returns true if the minheap is empty.\n  isEmpty() {\n    if (this.heap.length < 2) {\n      return true;\n    }\n    return false;\n  }\n}\n","import React, { Component } from \"react\";\n\nimport Node from \"./Node/Node\";\nimport DropdownMenu from \"./Buttons/DropdownMenu/DropdownMenu\";\nimport NavigationBar from \"./NavigationBar/NavigationBar\";\nimport DrawToggle from \"./Buttons/DrawToggle/DrawToggle\";\nimport Slider from \"./Buttons/Slider/Slider\";\nimport { AlgorithmTitle } from \"./AlgorithmTitle/AlgorithmTitle\";\nimport \"./Buttons/Button Styles/VisualizeButton.css\";\nimport { dijkstra } from \"./Search Algorithms/Dijkstra\";\nimport { breadthFirstSearch } from \"./Search Algorithms/BreadthFirstSearch\";\nimport { depthFirstSearch } from \"./Search Algorithms/DepthFirstSearch\";\nimport { aStar } from \"./Search Algorithms/AStar\";\n\nimport \"./PathfindingVisualizer.css\";\n\nconst NUM_ROWS = Math.floor(getScreenHeight() / 30);\nconst NUM_COLS = Math.floor(getScreenWidth() / 30);\n\nconst START_NODE_ROW = 5;\nconst START_NODE_COL = 1;\nconst TARGET_NODE_ROW = NUM_ROWS - 2;\nconst TARGET_NODE_COL = NUM_COLS - 2;\n\nconst DIJKSTRA = \"Dijkstra\";\nconst BFS = \"BFS\";\nconst DFS = \"DFS\";\nconst ASTAR = \"A*\";\n\nconst WALLS = \"Walls\";\nconst WEIGHTS = \"Weights\";\n\nexport default class PathfindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      startNodeRow: START_NODE_ROW,\n      startNodeCol: START_NODE_COL,\n      targetNodeRow: TARGET_NODE_ROW,\n      targetNodeCol: TARGET_NODE_COL,\n      mouseDown: false,\n      algorithm: DIJKSTRA,\n      drawMode: WALLS,\n      movingStart: false,\n      movingTarget: false,\n      movingLaunchPad: false,\n      weightValue: 5,\n      launchPadRow: null,\n      launchPadCol: null,\n    };\n  }\n\n  componentDidMount() {\n    const grid = this.createInitialGrid();\n    document.body.onmouseup = this.handleOnMouseUp.bind(this);\n    document.body.onmouseleave = this.handleOnMouseUp.bind(this);\n    this.setState({ grid: grid });\n  }\n\n  render() {\n    const { grid } = this.state;\n    return (\n      <div>\n        <AlgorithmTitle algorithm={this.state.algorithm} />\n        <NavigationBar>\n          <DropdownMenu title={this.state.algorithm}>\n            <button onClick={() => this.setState({ algorithm: DIJKSTRA })}>\n              Dijkstra\n            </button>\n            <button onClick={() => this.setState({ algorithm: BFS })}>\n              BFS\n            </button>\n            <button onClick={() => this.setState({ algorithm: DFS })}>\n              DFS\n            </button>\n            <button onClick={() => this.setState({ algorithm: ASTAR })}>\n              A*\n            </button>\n          </DropdownMenu>\n          <button\n            id=\"visualize-button\"\n            onClick={() => this.visualize(this.state.algorithm)}\n          >\n            Go\n          </button>\n          <button onClick={this.clearPath.bind(this)}>Clear Path</button>\n          <button onClick={this.clearWalls.bind(this)}>Clear Walls</button>\n          <button\n            onClick={this.clearWeights.bind(this)}\n            style={{ marginRight: \"100px\" }}\n          >\n            Clear Weights\n          </button>\n          <DrawToggle\n            setDrawMode={(mode) => {\n              this.setState({ drawMode: mode });\n            }}\n          />\n          <Slider\n            value={this.state.weightValue}\n            setValue={this.setWeightValue.bind(this)}\n          />\n        </NavigationBar>\n\n        {this.displayGrid(grid)}\n        {/*<div className=\"credits\">\n          <a target=\"_blank\" href=\"https://icons8.com/icon/62234/launch\">\n            Launch\n          </a>{\" \"}\n          icon by{\" \"}\n          <a target=\"_blank\" href=\"https://icons8.com\">\n            Icons8\n          </a>\n          <a target=\"_blank\" href=\"https://icons8.com/icon/100900/empty-flag\">\n            Empty Flag\n          </a>{\" \"}\n          icon by{\" \"}\n          <a target=\"_blank\" href=\"https://icons8.com\">\n            Icons8\n          </a>\n          <a\n            target=\"_blank\"\n            href=\"https://icons8.com/icon/118838/vertical-line\"\n          >\n            Vertical Line\n          </a>{\" \"}\n          icon by{\" \"}\n          <a target=\"_blank\" href=\"https://icons8.com\">\n            Icons8\n          </a>\n          <div>\n            Icons made by{\" \"}\n            <a href=\"https://www.freepik.com\" title=\"Freepik\">\n              Freepik\n            </a>{\" \"}\n            from{\" \"}\n            <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\n              www.flaticon.com\n            </a>\n          </div>\n    </div>\n    <div>Icons made by <a href=\"\" title=\"Vitaly Gorbachev\">Vitaly Gorbachev</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>*/}\n      </div>\n    );\n  }\n\n  setWeightValue(value) {\n    this.setState({ weightValue: value });\n  }\n\n  visualize(algorithm) {\n    switch (algorithm) {\n      case DIJKSTRA:\n        this.visualizeDijkstra();\n        break;\n      case BFS:\n        this.visualizeBreadthFirstSearch();\n        break;\n      case DFS:\n        this.visualizeDepthFirstSearch();\n        break;\n      case ASTAR:\n        this.visualizeAStar();\n        break;\n      default:\n        return;\n    }\n  }\n\n  // Used to disply disjkstra when moving launch pad,\n  // instead of fully animating dijkstra.\n  redrawPath() {\n    let grid = this.copyGrid();\n    const startNode = grid[this.state.launchPadRow][this.state.launchPadCol];\n    const targetNode = grid[this.state.targetNodeRow][this.state.targetNodeCol];\n\n    var pathReversed;\n\n    switch (this.state.algorithm) {\n      case DIJKSTRA:\n        pathReversed = dijkstra(\n          grid,\n          startNode,\n          targetNode,\n          NUM_ROWS,\n          NUM_COLS,\n          this.state.weightValue\n        ).shortestPathReversed;\n        break;\n      case BFS:\n        pathReversed = breadthFirstSearch(\n          grid,\n          startNode,\n          targetNode,\n          NUM_ROWS,\n          NUM_COLS\n        ).shortestPathReversed;\n        break;\n      case DFS:\n        pathReversed = depthFirstSearch(\n          grid,\n          startNode,\n          targetNode,\n          NUM_ROWS,\n          NUM_COLS\n        ).pathReversed;\n        break;\n      case ASTAR:\n        pathReversed = aStar(\n          grid,\n          startNode,\n          targetNode,\n          NUM_ROWS,\n          NUM_COLS,\n          this.state.weightValue\n        ).shortestPathReversed;\n        break;\n      default:\n        return;\n    }\n\n    /*const { shortestPathReversed } = dijkstra(\n      grid,\n      startNode,\n      targetNode,\n      NUM_ROWS,\n      NUM_COLS,\n      this.state.weightValue\n    );*/\n\n    const lines = this.pathToLines(pathReversed);\n\n    grid = this.copyGrid();\n\n    for (let i = 0; i < pathReversed.length; i++) {\n      const row = pathReversed[i].row;\n      const col = pathReversed[i].col;\n      grid[row][col].direction = lines[i];\n      grid[row][col].isPath = true;\n    }\n    this.setState({ grid: grid });\n  }\n\n  visualizeDijkstra() {\n    let grid = this.copyGrid();\n    this.resetNodes(grid);\n    this.setState({ grid: grid }, () => {\n      grid = this.copyGrid();\n      const startNode = grid[this.state.startNodeRow][this.state.startNodeCol];\n      const targetNode =\n        grid[this.state.targetNodeRow][this.state.targetNodeCol];\n      const { visitedNodesInOrder, shortestPathReversed } = dijkstra(\n        grid,\n        startNode,\n        targetNode,\n        NUM_ROWS,\n        NUM_COLS,\n        this.state.weightValue\n      );\n      this.animateSearch(visitedNodesInOrder, shortestPathReversed);\n    });\n  }\n\n  visualizeBreadthFirstSearch() {\n    let grid = this.copyGrid();\n    this.resetNodes(grid);\n    this.setState({ grid: grid }, () => {\n      grid = this.copyGrid();\n      const startNode = grid[this.state.startNodeRow][this.state.startNodeCol];\n      const targetNode =\n        grid[this.state.targetNodeRow][this.state.targetNodeCol];\n      const { visitedNodesInOrder, shortestPathReversed } = breadthFirstSearch(\n        grid,\n        startNode,\n        targetNode,\n        NUM_ROWS,\n        NUM_COLS\n      );\n      this.animateSearch(visitedNodesInOrder, shortestPathReversed);\n    });\n  }\n\n  visualizeDepthFirstSearch() {\n    let grid = this.copyGrid();\n    this.resetNodes(grid);\n    this.setState({ grid: grid }, () => {\n      grid = this.copyGrid();\n      const startNode = grid[this.state.startNodeRow][this.state.startNodeCol];\n      const targetNode =\n        grid[this.state.targetNodeRow][this.state.targetNodeCol];\n      const { visitedNodesInOrder, pathReversed } = depthFirstSearch(\n        grid,\n        startNode,\n        targetNode,\n        NUM_ROWS,\n        NUM_COLS\n      );\n      this.animateSearch(visitedNodesInOrder, pathReversed);\n    });\n  }\n\n  visualizeAStar() {\n    let grid = this.copyGrid();\n    this.resetNodes(grid);\n    this.setState({ grid: grid }, () => {\n      grid = this.copyGrid();\n      const startNode = grid[this.state.startNodeRow][this.state.startNodeCol];\n      const targetNode =\n        grid[this.state.targetNodeRow][this.state.targetNodeCol];\n      const { visitedNodesInOrder, shortestPathReversed } = aStar(\n        grid,\n        startNode,\n        targetNode,\n        NUM_ROWS,\n        NUM_COLS,\n        this.state.weightValue\n      );\n      this.animateSearch(visitedNodesInOrder, shortestPathReversed);\n    });\n  }\n\n  animateSearch(visitedNodesInOrder, pathReversed) {\n    for (let i = 0; i < visitedNodesInOrder.length; i++) {\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        // Start path animation after last visited node.\n        if (i === visitedNodesInOrder.length - 1) {\n          this.animatePath(pathReversed);\n        } else {\n          if (!node.isStart && !node.isTarget) {\n            // Normally shouldn't do this, but had to to optimize performance.\n            const element = document.getElementById(\n              `node-${node.row}-${node.col}`\n            );\n            element.classList.remove(\"unvisited\");\n            element.classList.add(\"visited\");\n          }\n        }\n      }, 5 * i);\n    }\n  }\n\n  animatePath(pathReversed) {\n    const lines = this.pathToLines(pathReversed);\n    let startRow = this.state.startNodeRow;\n    let startCol = this.state.startNodeCol;\n    for (let i = pathReversed.length - 1; i >= 0; i--) {\n      startRow = pathReversed[i].row;\n      startCol = pathReversed[i].col;\n      setTimeout(\n        () => this.moveRocketShip(pathReversed, lines, i),\n        3000 * ((pathReversed.length - i) / pathReversed.length)\n      );\n    }\n  }\n\n  moveRocketShip(pathReversed, lines, i) {\n    const node = pathReversed[i];\n    if (!node.isStart) {\n      const prevNode = pathReversed[i + 1];\n      const grid = this.copyGrid();\n      grid[prevNode.row][prevNode.col].isStart = false;\n      grid[prevNode.row][prevNode.col].isPath = true;\n      grid[prevNode.row][prevNode.col].direction = lines[i + 1];\n      grid[node.row][node.col].isStart = true;\n      if (grid[node.row][node.col].isTarget) {\n        grid[node.row][node.col].isTargetReached = true;\n      }\n      if (grid[prevNode.row][prevNode.col].direction === \"landing-pad\") {\n        this.setState({\n          grid: grid,\n          launchPadRow: prevNode.row,\n          launchPadCol: prevNode.col,\n        });\n        return;\n      }\n      this.setState({ grid: grid });\n    }\n  }\n\n  // Returns an array of lines, given a path of nodes.\n  pathToLines(pathReversed) {\n    const lines = [];\n    const directions = [];\n    directions.push(\"none\");\n    for (let i = 1; i < pathReversed.length; i++) {\n      let prevNode = pathReversed[i - 1];\n      let currNode = pathReversed[i];\n      let dRow = prevNode.row - currNode.row;\n      let dCol = currNode.col - prevNode.col;\n      const direction =\n        dCol === 1\n          ? \"right\"\n          : dCol === -1\n          ? \"left\"\n          : dRow === 1\n          ? \"up\"\n          : dRow === -1\n          ? \"down\"\n          : \"\";\n      directions.push(direction);\n      const line =\n        direction === \"right\" && directions[i - 1] === \"none\"\n          ? \"horizontal\"\n          : direction === \"right\" && directions[i - 1] === \"right\"\n          ? \"horizontal\"\n          : direction === \"right\" && directions[i - 1] === \"up\"\n          ? \"ul\"\n          : direction === \"right\" && directions[i - 1] === \"down\"\n          ? \"bl\"\n          : direction === \"left\" && directions[i - 1] === \"none\"\n          ? \"horizontal\"\n          : direction === \"left\" && directions[i - 1] === \"left\"\n          ? \"horizontal\"\n          : direction === \"left\" && directions[i - 1] === \"up\"\n          ? \"ur\"\n          : direction === \"left\" && directions[i - 1] === \"down\"\n          ? \"br\"\n          : direction === \"up\" && directions[i - 1] === \"none\"\n          ? \"vertical\"\n          : direction === \"up\" && directions[i - 1] === \"up\"\n          ? \"vertical\"\n          : direction === \"up\" && directions[i - 1] === \"left\"\n          ? \"bl\"\n          : direction === \"up\" && directions[i - 1] === \"right\"\n          ? \"br\"\n          : direction === \"down\" && directions[i - 1] === \"none\"\n          ? \"vertical\"\n          : direction === \"down\" && directions[i - 1] === \"down\"\n          ? \"vertical\"\n          : direction === \"down\" && directions[i - 1] === \"left\"\n          ? \"ul\"\n          : direction === \"down\" && directions[i - 1] === \"right\"\n          ? \"ur\"\n          : \"\";\n      lines.push(line);\n    }\n    lines.push(\"landing-pad\");\n    return lines;\n  }\n\n  // Handles onMouseDown event on node at given row and column.\n  handleOnMouseDown(row, col) {\n    const grid = this.copyGrid();\n    const node = grid[row][col];\n    // Start moving target node.\n    if (node.isTarget) {\n      this.setState({ movingTarget: true, mouseDown: true });\n      return;\n    }\n    // Start moving launch pad.\n    if (node.isPath && node.direction === \"landing-pad\") {\n      this.setState({ movingLaunchPad: true, mouseDown: true });\n      return;\n    }\n    // Start moving start node.\n    if (node.isStart) {\n      this.setState({ movingStart: true, mouseDown: true });\n      return;\n    }\n    // Start drawing walls or weights no the node.\n    switch (this.state.drawMode) {\n      case WALLS:\n        node.isWall = !node.isWall;\n        node.isWeight = false;\n        this.setState({ grid: grid, mouseDown: true });\n        break;\n      case WEIGHTS:\n        node.isWeight = !node.isWeight;\n        node.isWall = false;\n        this.setState({ grid: grid, mouseDown: true });\n        break;\n      default:\n        return;\n    }\n  }\n\n  handleOnMouseUp() {\n    if (this.state.mouseDown === true) {\n      this.setState({\n        mouseDown: false,\n        movingStart: false,\n        movingTarget: false,\n        movingLaunchPad: false,\n      });\n    }\n  }\n\n  handleOnMouseEnter(row, col) {\n    if (this.state.mouseDown === true) {\n      const grid = this.copyGrid();\n      const node = grid[row][col];\n      // Move target node.\n      if (this.state.movingTarget) {\n        // Remove path.\n        for (const row of grid) {\n          for (var node_ of row) {\n            node_.isPath = false;\n            node_.direction = null;\n            node_.isVisited = false;\n          }\n        }\n        // Move target node.\n        const prevTarget =\n          grid[this.state.targetNodeRow][this.state.targetNodeCol];\n        prevTarget.isTarget = false;\n        prevTarget.isTargetReached = false;\n        prevTarget.isStart = false;\n        node.isTarget = true;\n        // Set state.\n        this.setState(\n          {\n            grid: grid,\n            targetNodeRow: row,\n            targetNodeCol: col,\n          },\n          // ReDraw path.\n          this.redrawPath\n        );\n        return;\n        /*this.setState({ grid: grid, targetNodeRow: row, targetNodeCol: col });\n        return;*/\n      }\n      // Move launch pad.\n      if (this.state.movingLaunchPad) {\n        // Remove path.\n        for (const row of grid) {\n          for (var node_ of row) {\n            node_.isPath = false;\n            node_.direction = null;\n            node_.isVisited = false;\n          }\n        }\n        // Move launch pad.\n        const prevLaunchPad =\n          grid[this.state.launchPadRow][this.state.launchPadCol];\n        prevLaunchPad.isPath = false;\n        prevLaunchPad.direction = null;\n        node.isPath = true;\n        node.direction = \"landing-pad\";\n        // Adjust start node.\n        const prevStart =\n          grid[this.state.startNodeRow][this.state.startNodeCol];\n        prevStart.isStart = false;\n        node.isStart = true;\n        // Set state.\n        this.setState(\n          {\n            grid: grid,\n            launchPadRow: row,\n            launchPadCol: col,\n            startNodeRow: row,\n            startNodeCol: col,\n          },\n          // ReDraw path.\n          this.redrawPath\n        );\n        return;\n      }\n      // Move start node.\n      if (this.state.movingStart) {\n        const prevStart =\n          grid[this.state.startNodeRow][this.state.startNodeCol];\n        prevStart.isStart = false;\n        node.isStart = true;\n        this.setState({ grid: grid, startNodeRow: row, startNodeCol: col });\n        return;\n      }\n\n      switch (this.state.drawMode) {\n        case WALLS:\n          node.isWall = !node.isWall;\n          node.isWeight = false;\n          this.setState({ grid: grid });\n          break;\n        case WEIGHTS:\n          node.isWeight = !node.isWeight;\n          node.isWall = false;\n          this.setState({ grid: grid });\n          break;\n        default:\n          return;\n      }\n    }\n  }\n\n  // Create a 2D array of node objects.\n  createInitialGrid() {\n    const grid = [];\n    for (let row = 0; row < NUM_ROWS; row++) {\n      const currentRow = [];\n      for (let col = 0; col < NUM_COLS; col++) {\n        const currNode = new NodeObj(col, row);\n        if (\n          row === this.state.startNodeRow &&\n          col === this.state.startNodeCol\n        ) {\n          currNode.isStart = true;\n        } else if (\n          row === this.state.targetNodeRow &&\n          col === this.state.targetNodeCol\n        ) {\n          currNode.isTarget = true;\n        }\n        currentRow.push(currNode);\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  }\n\n  // Map the grid to Node components that are displayed.\n  displayGrid(nodes) {\n    return (\n      <div className=\"grid\">\n        {nodes.map((row, rowIndex) => {\n          return (\n            <div className=\"row\" key={rowIndex}>\n              {row.map((node, nodeIndex) => {\n                return (\n                  <Node\n                    draggable=\"false\"\n                    key={nodeIndex}\n                    isStart={node.isStart}\n                    isTarget={node.isTarget}\n                    isWall={node.isWall}\n                    isWeight={node.isWeight}\n                    isVisited={node.isVisited}\n                    isPath={node.isPath}\n                    row={node.row}\n                    col={node.col}\n                    direction={node.direction}\n                    isTargetReached={node.isTargetReached}\n                    handleOnMouseDown={this.handleOnMouseDown.bind(this)}\n                    handleOnMouseUp={this.handleOnMouseUp.bind(this)}\n                    handleOnMouseEnter={this.handleOnMouseEnter.bind(this)}\n                  ></Node>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  resetNodes(grid) {\n    for (const row of grid) {\n      for (const node of row) {\n        // We have to reset isVisited, and isPath of nodes the same way we set them.\n        if (!node.isWall && !node.isStart && !node.isTarget && !node.isWeight) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node\";\n        } else if (node.isWeight) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-weight unvisited\";\n        }\n        node.isVisited = false;\n        node.isPath = false;\n        node.previousNode = null;\n        node.distance = Infinity;\n        node.isStart =\n          node.row === this.state.startNodeRow &&\n          node.col === this.state.startNodeCol;\n        node.isTarget =\n          node.row === this.state.targetNodeRow &&\n          node.col === this.state.targetNodeCol;\n        node.isTargetReached = false;\n      }\n    }\n  }\n\n  clearPath() {\n    const grid = this.copyGrid();\n    this.resetNodes(grid);\n    this.setState({ grid: grid });\n  }\n\n  clearWalls() {\n    const grid = this.copyGrid();\n    for (const row of grid) {\n      for (const node of row) {\n        if (node.isWall) {\n          node.isWall = false;\n        }\n      }\n    }\n    this.setState({ grid: grid });\n  }\n\n  clearWeights() {\n    const grid = this.copyGrid();\n    for (const row of grid) {\n      for (const node of row) {\n        if (node.isWeight) {\n          node.isWeight = false;\n        }\n      }\n    }\n    this.setState({ grid: grid });\n  }\n\n  copyGrid() {\n    const grid = this.state.grid;\n    const copiedGrid = [];\n    for (const row of grid) {\n      const copiedRow = row.map((node) => {\n        const copiedNode = Object.assign({}, node);\n        return copiedNode;\n      });\n      copiedGrid.push(copiedRow);\n    }\n    return copiedGrid;\n  }\n}\n\n// Node object constructor.\nfunction NodeObj(col, row) {\n  this.col = col;\n  this.row = row;\n  this.isStart = false;\n  this.isTarget = false;\n  this.isVisited = false;\n  this.isWall = false;\n  this.isWeight = false;\n  // Distance from start node.\n  this.distance = Infinity;\n  // Previous node used to trace path.\n  this.previousNode = null;\n  this.direction = null;\n  this.isTargetReached = false;\n}\n\n// Function to get the width of the browser window.\nfunction getScreenWidth() {\n  return Math.max(\n    document.body.scrollWidth,\n    document.documentElement.scrollWidth,\n    document.body.offsetWidth,\n    document.documentElement.offsetWidth,\n    document.documentElement.clientWidth\n  );\n}\n\nfunction getScreenHeight() {\n  return window.innerHeight;\n}\n","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}